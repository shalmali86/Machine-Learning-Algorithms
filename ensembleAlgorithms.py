# -*- coding: utf-8 -*-
"""AIMLsession15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10KniBQBBxRHciAU3uIRDcBNuHruruFkJ
"""

import numpy as np
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score

iris = load_iris()

X = iris.data
y = iris.target

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

X_train,X_test,y_train,y_test = train_test_split(X_scaled,y,test_size=0.2,random_state=42)

clf = MultinomialNB()
clf.fit(X_train,y_train)

y_pred = clf.predict(X_test)
print(accuracy_score(y_test,y_pred))

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)

clf = MultinomialNB()
clf.fit(X_train,y_train)

y_pred = clf.predict(X_test)
print(accuracy_score(y_test,y_pred))

#import required libraries
import numpy as np
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.ensemble import VotingClassifier
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier

iris = load_iris()
X = iris.data
y = iris.target

X

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)

estimator = []
estimator.append(('LR',LogisticRegression(multi_class='multinomial',max_iter=200)))
estimator.append(('SVC',SVC(kernel='linear',probability=True)))
estimator.append(('DTC',DecisionTreeClassifier()))

estimator

vot_hard = VotingClassifier(estimators=estimator,voting='hard')
vot_hard.fit(X_train,y_train)
y_pred = vot_hard.predict(X_test)

score = accuracy_score(y_test,y_pred)
print(score)

vot_soft= VotingClassifier(estimators=estimator,voting='soft')
vot_soft.fit(X_train,y_train)
y_pred = vot_hard.predict(X_test)

score = accuracy_score(y_test,y_pred)
print(score)

t = vot_soft.predict([[5.9, 3. , 5.1, 1.8]])
print(t)

import numpy as np
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.ensemble import BaggingClassifier
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

iris =load_iris()
X = iris.data
y = iris.target

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)

clf = BaggingClassifier(estimator=SVC(kernel='linear'),n_estimators=10,random_state=42)

clf.fit(X_train,y_train)

clf.estimators_

clf.estimators_samples_

len(clf.estimators_samples_[0])

t0 = len(set(clf.estimators_samples_[0]))

t0

y_pred = clf.predict(X_test)
print(accuracy_score(y_test,y_pred))

