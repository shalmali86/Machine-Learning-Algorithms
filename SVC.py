# -*- coding: utf-8 -*-
"""AIMLSession13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13zW5SPR-hD2i-UPTdmISiifIBpuBrW7G
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.datasets import make_blobs
from sklearn.svm import SVC

X,y = make_blobs(n_samples=50, centers=2, random_state=0, cluster_std=0.6)

plt.scatter(X[:,0], X[:,1], c=y, s=50, cmap='winter')

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=0)

clf = SVC(kernel='linear')

clf.fit(X_train,y_train)

from mlxtend.plotting import plot_decision_regions

plot_decision_regions(X_train,y_train,clf=clf,legend=2)
support_vectors = clf.support_vectors_
plt.scatter(support_vectors[:,0],support_vectors[:,1],s=100,linewidth=1,facecolors='None',edgecolors='b')
plt.show()

support_vectors

import numpy as np
import pandas as pd
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris
from sklearn.metrics import accuracy_score

iris = load_iris()
X = iris.data
y = iris.target

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)

clf = SVC(kernel='rbf')
clf.fit(X_train,y_train)

y_pred = clf.predict(X_test)

accuracy = accuracy_score(y_test,y_pred)
print(f"Accuracy: {accuracy}")

clf.score(X_train,y_train)

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris
from sklearn.metrics import accuracy_score
from sklearn import tree

iris = load_iris()
X = iris.data
y = iris.target

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)

rf = RandomForestClassifier(n_estimators=100,random_state=42)

rf.fit(X_train,y_train)

rf.score(X_train,y_train)

fn = iris.feature_names
cn = iris.target_names
fig, axes = plt.subplots(nrows=1,ncols=1,figsize=(4,4),dpi=300)
tree.plot_tree(rf.estimators_[0],feature_names=fn,class_names=cn,filled=True)

fig, axes = plt.subplots(nrows=1,ncols=5,figsize=(10,2),dpi=900)
for index in range(0,5):
    tree.plot_tree(rf.estimators_[index],feature_names=fn,class_names=cn,filled=True,ax=axes[index])
    axes[index].set_title(f"Tree {index+1}")

dtreeviz